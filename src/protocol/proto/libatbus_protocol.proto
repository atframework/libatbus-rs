syntax = "proto3";

import "libatbus_options.proto";

package atbus.protocol;

option optimize_for = SPEED;
// option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE;
// --cpp_out=lite:,--cpp_out=
option cc_enable_arenas = true;

enum ATBUS_PROTOCOL_CONST {
  option allow_alias                   = true;
  ATBUS_PROTOCOL_CONST_UNKNOWN         = 0;
  ATBUS_PROTOCOL_CONST_MAGIC_NUMBER    = 16777619; // 0x1000193
  ATBUS_PROTOCOL_CONST_VERSION         = 3;
  ATBUS_PROTOCOL_CONST_MINIMAL_VERSION = 3; // minimal protocol version supported

  // Internal packet type, user custom type should be greater than this.
  ATBUS_PROTOCOL_CONST_INTERNAL_PACKET_TYPE = 100;
}

enum ATBUS_PACKET_FLAG_TYPE {
  ATBUS_PACKET_FLAG_TYPE_NONE = 0; // default value

  // Finish current stream, similar to FIN of TCP
  // Receiver should destroy this stream when got this flag
  ATBUS_PACKET_FLAG_TYPE_FINISH_STREAM = 1;

  // Finish current connection, similar to FIN of TCP
  // Receiver should destroy this connection when got this flag
  ATBUS_PACKET_FLAG_TYPE_FINISH_CONNECTION = 2;

  // Reset offset and drop datas before offset of this packet.
  // When endpoints are first created or receive a packet_data with acknowledge lower than the first message in queue
  // We need to send a packet_data with ATBUS_PACKET_FLAG_RESET_OFFSET.
  // When any packet is sent partly by this connection and the rest fragments are received by other connections, we also
  // will send the first fragmentof next packet with ATBUS_PACKET_FLAG_TYPE_RESET_OFFSET.
  ATBUS_PACKET_FLAG_TYPE_RESET_OFFSET = 4;

  // TLS Handshake
  ATBUS_PACKET_FLAG_TYPE_TLS_HANDSHAKE = 8;
}

enum ATBUS_PACKET_FRAGMENT_FLAG_TYPE {
  ATBUS_PACKET_FRAGMENT_FLAG_TYPE_NONE = 0;

  // This is not the last fragment of current packet.
  // We need wait for more fragments to finish it.
  ATBUS_PACKET_FRAGMENT_FLAG_TYPE_HAS_MORE = 1;
}

enum ATBUS_CLOSE_REASON {
  ATBUS_CLOSE_REASON_UNKNOWN = 0;
  // Shutdown by API
  ATBUS_CLOSE_REASON_SHUTDOWN = 1;
  // Lost connection
  ATBUS_CLOSE_REASON_PEER_RESET = 2;
  // Unauthorized
  ATBUS_CLOSE_REASON_UNAUTHORIZED = 3;
}

enum ATBUS_PACKET_TYPE {
  ATBUS_PACKET_TYPE_DATA      = 0;
  ATBUS_PACKET_TYPE_COMMAND   = 1;
  ATBUS_PACKET_TYPE_HANDSHAKE = 2;
}

message stream_acknowledge {
  int64 stream_id = 1;

  // All datas before this offest are received.(Not include)
  // offset do not include padding size
  int64 acknowledge_offset = 2;

  // Max received offest.(Not include, this is used to detect and resend lost packets)
  // offset do not include padding size
  int64 received_max_offset = 3;
}

message ping_data { int64 timepoint_microseconds = 1; }

message forward_data {
  int32  version       = 1;
  string source        = 2;
  string scheme        = 3;
  bytes  address       = 4;
  int32  port          = 5;
  int64  connection_id = 6;
}

message close_reason_data {
  ATBUS_CLOSE_REASON code    = 1;
  string             message = 2;
}

message packet_content {
  message fragment_type {
    int32 packet_type = 1; // @see ATBUS_INTERNAL_PACKET_TYPE
    bytes data        = 2;

    // @see ATBUS_PACKET_FRAGMENT_FLAG_TYPE
    int32 fragment_flag = 3;

    packet_options options = 4;
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
    // https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/cri-api/pkg/apis/runtime/v1/api.proto
    map<string, string> labels = 5; // allow custom labels

    // This field should exists when first create a relay connection.
    forward_data forward_for = 6;

    // This field only be filled when ATBUS_PACKET_FLAG_TYPE_FINISH_STREAM or ATBUS_PACKET_FLAG_TYPE_FINISH_CONNECTION is set.
    close_reason_data close_reason = 7;
  }

  repeated fragment_type fragment = 1;
}

message packet_data {
  // Stream id is used for concurrency transfer.Just like Stream ID in HTTP/3
  // We can transfer different stream on different connection to improve throughput
  int64 stream_id = 1;

  // offset do not include padding size
  int64 stream_offset = 2;

  // content is encoded and crypted packet_content
  bytes content = 3;
  // @see ATBUS_PACKET_FLAG_TYPE
  int32 flags = 4;
  // How many datas we should ingnore for padding.
  // It's usually used by the last package of encrypted data.
  int32 padding_size = 5;

  // Filled by connection to detect delay
  int64 timepoint_microseconds = 6;
}

message acknowledge_data {
  stream_acknowledge acknowledge = 1;

  int64 timepoint_microseconds = 2;

  // Tell relaysvr to acknowledge forward connection,so relaysvr will not fill packet_data.forward_for
  // for this connection any more.
  forward_data forward_for = 11;
}

message message_head {
  string source                    = 1;
  string destination               = 2; // Target node name or group name
  string forward_for_source        = 3; // Always filled by relaysvr
  int64  forward_for_connection_id = 4; // Always filled by relaysvr
}

message frame_message {
  message_head head = 1;
  oneof        body {
    ping_data        ping        = 5;
    ping_data        pong        = 6;
    packet_data      packet      = 7;
    acknowledge_data acknowledge = 8;
  }
}
