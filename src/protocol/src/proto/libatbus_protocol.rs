// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `libatbus_protocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct command_data {
    // message fields
    pub sequence: i64,
    pub arguments: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub options: ::protobuf::SingularPtrField<super::libatbus_options::command_options>,
    pub tags: ::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a command_data {
    fn default() -> &'a command_data {
        <command_data as ::protobuf::Message>::default_instance()
    }
}

impl command_data {
    pub fn new() -> command_data {
        ::std::default::Default::default()
    }

    // int64 sequence = 1;


    pub fn get_sequence(&self) -> i64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: i64) {
        self.sequence = v;
    }

    // repeated bytes arguments = 2;


    pub fn get_arguments(&self) -> &[::std::vec::Vec<u8>] {
        &self.arguments
    }
    pub fn clear_arguments(&mut self) {
        self.arguments.clear();
    }

    // Param is passed by value, moved
    pub fn set_arguments(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.arguments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arguments(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.arguments
    }

    // Take field
    pub fn take_arguments(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.arguments, ::protobuf::RepeatedField::new())
    }

    // .atbus.protocol.command_options options = 3;


    pub fn get_options(&self) -> &super::libatbus_options::command_options {
        self.options.as_ref().unwrap_or_else(|| <super::libatbus_options::command_options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: super::libatbus_options::command_options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut super::libatbus_options::command_options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> super::libatbus_options::command_options {
        self.options.take().unwrap_or_else(|| super::libatbus_options::command_options::new())
    }

    // repeated .atbus.protocol.command_data.TagsEntry tags = 4;


    pub fn get_tags(&self) -> &::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value> {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value> {
        ::std::mem::replace(&mut self.tags, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for command_data {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sequence = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.arguments)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::any_value>>(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.arguments {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::any_value>>(4, &self.tags);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_int64(1, self.sequence)?;
        }
        for v in &self.arguments {
            os.write_bytes(2, &v)?;
        };
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::any_value>>(4, &self.tags, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> command_data {
        command_data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "sequence",
                |m: &command_data| { &m.sequence },
                |m: &mut command_data| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "arguments",
                |m: &command_data| { &m.arguments },
                |m: &mut command_data| { &mut m.arguments },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::command_options>>(
                "options",
                |m: &command_data| { &m.options },
                |m: &mut command_data| { &mut m.options },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::any_value>>(
                "tags",
                |m: &command_data| { &m.tags },
                |m: &mut command_data| { &mut m.tags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<command_data>(
                "command_data",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static command_data {
        static instance: ::protobuf::rt::LazyV2<command_data> = ::protobuf::rt::LazyV2::INIT;
        instance.get(command_data::new)
    }
}

impl ::protobuf::Clear for command_data {
    fn clear(&mut self) {
        self.sequence = 0;
        self.arguments.clear();
        self.options.clear();
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for command_data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for command_data {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ping_data {
    // message fields
    pub sequence: i64,
    pub timepoint: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ping_data {
    fn default() -> &'a ping_data {
        <ping_data as ::protobuf::Message>::default_instance()
    }
}

impl ping_data {
    pub fn new() -> ping_data {
        ::std::default::Default::default()
    }

    // int64 sequence = 1;


    pub fn get_sequence(&self) -> i64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: i64) {
        self.sequence = v;
    }

    // int64 timepoint = 2;


    pub fn get_timepoint(&self) -> i64 {
        self.timepoint
    }
    pub fn clear_timepoint(&mut self) {
        self.timepoint = 0;
    }

    // Param is passed by value, moved
    pub fn set_timepoint(&mut self, v: i64) {
        self.timepoint = v;
    }
}

impl ::protobuf::Message for ping_data {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sequence = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timepoint = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timepoint != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timepoint, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_int64(1, self.sequence)?;
        }
        if self.timepoint != 0 {
            os.write_int64(2, self.timepoint)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ping_data {
        ping_data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "sequence",
                |m: &ping_data| { &m.sequence },
                |m: &mut ping_data| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timepoint",
                |m: &ping_data| { &m.timepoint },
                |m: &mut ping_data| { &mut m.timepoint },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ping_data>(
                "ping_data",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ping_data {
        static instance: ::protobuf::rt::LazyV2<ping_data> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ping_data::new)
    }
}

impl ::protobuf::Clear for ping_data {
    fn clear(&mut self) {
        self.sequence = 0;
        self.timepoint = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ping_data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ping_data {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct packet_data {
    // message fields
    pub packet_sequence: i64,
    pub packet_acknowledge: i64,
    pub content: ::std::vec::Vec<u8>,
    pub flags: i32,
    pub options: ::protobuf::SingularPtrField<super::libatbus_options::packet_options>,
    pub tags: ::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value>,
    pub packet_slice_start: i64,
    pub packet_slice_count: i64,
    pub packet_length: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a packet_data {
    fn default() -> &'a packet_data {
        <packet_data as ::protobuf::Message>::default_instance()
    }
}

impl packet_data {
    pub fn new() -> packet_data {
        ::std::default::Default::default()
    }

    // int64 packet_sequence = 1;


    pub fn get_packet_sequence(&self) -> i64 {
        self.packet_sequence
    }
    pub fn clear_packet_sequence(&mut self) {
        self.packet_sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_packet_sequence(&mut self, v: i64) {
        self.packet_sequence = v;
    }

    // int64 packet_acknowledge = 2;


    pub fn get_packet_acknowledge(&self) -> i64 {
        self.packet_acknowledge
    }
    pub fn clear_packet_acknowledge(&mut self) {
        self.packet_acknowledge = 0;
    }

    // Param is passed by value, moved
    pub fn set_packet_acknowledge(&mut self, v: i64) {
        self.packet_acknowledge = v;
    }

    // bytes content = 3;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }

    // int32 flags = 4;


    pub fn get_flags(&self) -> i32 {
        self.flags
    }
    pub fn clear_flags(&mut self) {
        self.flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: i32) {
        self.flags = v;
    }

    // .atbus.protocol.packet_options options = 5;


    pub fn get_options(&self) -> &super::libatbus_options::packet_options {
        self.options.as_ref().unwrap_or_else(|| <super::libatbus_options::packet_options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: super::libatbus_options::packet_options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut super::libatbus_options::packet_options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> super::libatbus_options::packet_options {
        self.options.take().unwrap_or_else(|| super::libatbus_options::packet_options::new())
    }

    // repeated .atbus.protocol.packet_data.TagsEntry tags = 6;


    pub fn get_tags(&self) -> &::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value> {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::collections::HashMap<::std::string::String, super::libatbus_options::any_value> {
        ::std::mem::replace(&mut self.tags, ::std::collections::HashMap::new())
    }

    // int64 packet_slice_start = 7;


    pub fn get_packet_slice_start(&self) -> i64 {
        self.packet_slice_start
    }
    pub fn clear_packet_slice_start(&mut self) {
        self.packet_slice_start = 0;
    }

    // Param is passed by value, moved
    pub fn set_packet_slice_start(&mut self, v: i64) {
        self.packet_slice_start = v;
    }

    // int64 packet_slice_count = 8;


    pub fn get_packet_slice_count(&self) -> i64 {
        self.packet_slice_count
    }
    pub fn clear_packet_slice_count(&mut self) {
        self.packet_slice_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_packet_slice_count(&mut self, v: i64) {
        self.packet_slice_count = v;
    }

    // int64 packet_length = 9;


    pub fn get_packet_length(&self) -> i64 {
        self.packet_length
    }
    pub fn clear_packet_length(&mut self) {
        self.packet_length = 0;
    }

    // Param is passed by value, moved
    pub fn set_packet_length(&mut self, v: i64) {
        self.packet_length = v;
    }
}

impl ::protobuf::Message for packet_data {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.packet_sequence = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.packet_acknowledge = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.flags = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::any_value>>(wire_type, is, &mut self.tags)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.packet_slice_start = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.packet_slice_count = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.packet_length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.packet_sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.packet_sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.packet_acknowledge != 0 {
            my_size += ::protobuf::rt::value_size(2, self.packet_acknowledge, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.content);
        }
        if self.flags != 0 {
            my_size += ::protobuf::rt::value_size(4, self.flags, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::any_value>>(6, &self.tags);
        if self.packet_slice_start != 0 {
            my_size += ::protobuf::rt::value_size(7, self.packet_slice_start, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.packet_slice_count != 0 {
            my_size += ::protobuf::rt::value_size(8, self.packet_slice_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.packet_length != 0 {
            my_size += ::protobuf::rt::value_size(9, self.packet_length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.packet_sequence != 0 {
            os.write_int64(1, self.packet_sequence)?;
        }
        if self.packet_acknowledge != 0 {
            os.write_int64(2, self.packet_acknowledge)?;
        }
        if !self.content.is_empty() {
            os.write_bytes(3, &self.content)?;
        }
        if self.flags != 0 {
            os.write_int32(4, self.flags)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::any_value>>(6, &self.tags, os)?;
        if self.packet_slice_start != 0 {
            os.write_int64(7, self.packet_slice_start)?;
        }
        if self.packet_slice_count != 0 {
            os.write_int64(8, self.packet_slice_count)?;
        }
        if self.packet_length != 0 {
            os.write_int64(9, self.packet_length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> packet_data {
        packet_data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "packet_sequence",
                |m: &packet_data| { &m.packet_sequence },
                |m: &mut packet_data| { &mut m.packet_sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "packet_acknowledge",
                |m: &packet_data| { &m.packet_acknowledge },
                |m: &mut packet_data| { &mut m.packet_acknowledge },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content",
                |m: &packet_data| { &m.content },
                |m: &mut packet_data| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "flags",
                |m: &packet_data| { &m.flags },
                |m: &mut packet_data| { &mut m.flags },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::packet_options>>(
                "options",
                |m: &packet_data| { &m.options },
                |m: &mut packet_data| { &mut m.options },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::libatbus_options::any_value>>(
                "tags",
                |m: &packet_data| { &m.tags },
                |m: &mut packet_data| { &mut m.tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "packet_slice_start",
                |m: &packet_data| { &m.packet_slice_start },
                |m: &mut packet_data| { &mut m.packet_slice_start },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "packet_slice_count",
                |m: &packet_data| { &m.packet_slice_count },
                |m: &mut packet_data| { &mut m.packet_slice_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "packet_length",
                |m: &packet_data| { &m.packet_length },
                |m: &mut packet_data| { &mut m.packet_length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<packet_data>(
                "packet_data",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static packet_data {
        static instance: ::protobuf::rt::LazyV2<packet_data> = ::protobuf::rt::LazyV2::INIT;
        instance.get(packet_data::new)
    }
}

impl ::protobuf::Clear for packet_data {
    fn clear(&mut self) {
        self.packet_sequence = 0;
        self.packet_acknowledge = 0;
        self.content.clear();
        self.flags = 0;
        self.options.clear();
        self.tags.clear();
        self.packet_slice_start = 0;
        self.packet_slice_count = 0;
        self.packet_length = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for packet_data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for packet_data {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct msg_head {
    // message fields
    pub version: i32,
    pub source: ::std::vec::Vec<u8>,
    pub destination: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a msg_head {
    fn default() -> &'a msg_head {
        <msg_head as ::protobuf::Message>::default_instance()
    }
}

impl msg_head {
    pub fn new() -> msg_head {
        ::std::default::Default::default()
    }

    // int32 version = 1;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    // bytes source = 2;


    pub fn get_source(&self) -> &[u8] {
        &self.source
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::vec::Vec<u8>) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.source, ::std::vec::Vec::new())
    }

    // bytes destination = 3;


    pub fn get_destination(&self) -> &[u8] {
        &self.destination
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::vec::Vec<u8>) {
        self.destination = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.destination
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.destination, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for msg_head {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.source)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.destination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.source);
        }
        if !self.destination.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.destination);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int32(1, self.version)?;
        }
        if !self.source.is_empty() {
            os.write_bytes(2, &self.source)?;
        }
        if !self.destination.is_empty() {
            os.write_bytes(3, &self.destination)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> msg_head {
        msg_head::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &msg_head| { &m.version },
                |m: &mut msg_head| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "source",
                |m: &msg_head| { &m.source },
                |m: &mut msg_head| { &mut m.source },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "destination",
                |m: &msg_head| { &m.destination },
                |m: &mut msg_head| { &mut m.destination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<msg_head>(
                "msg_head",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static msg_head {
        static instance: ::protobuf::rt::LazyV2<msg_head> = ::protobuf::rt::LazyV2::INIT;
        instance.get(msg_head::new)
    }
}

impl ::protobuf::Clear for msg_head {
    fn clear(&mut self) {
        self.version = 0;
        self.source.clear();
        self.destination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for msg_head {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for msg_head {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct msg {
    // message fields
    pub head: ::protobuf::SingularPtrField<msg_head>,
    // message oneof groups
    pub msg_body: ::std::option::Option<msg_oneof_msg_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a msg {
    fn default() -> &'a msg {
        <msg as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum msg_oneof_msg_body {
    node_ping(ping_data),
    node_pong(ping_data),
    command(command_data),
    forward(packet_data),
}

impl msg {
    pub fn new() -> msg {
        ::std::default::Default::default()
    }

    // .atbus.protocol.msg_head head = 1;


    pub fn get_head(&self) -> &msg_head {
        self.head.as_ref().unwrap_or_else(|| <msg_head as ::protobuf::Message>::default_instance())
    }
    pub fn clear_head(&mut self) {
        self.head.clear();
    }

    pub fn has_head(&self) -> bool {
        self.head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_head(&mut self, v: msg_head) {
        self.head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head(&mut self) -> &mut msg_head {
        if self.head.is_none() {
            self.head.set_default();
        }
        self.head.as_mut().unwrap()
    }

    // Take field
    pub fn take_head(&mut self) -> msg_head {
        self.head.take().unwrap_or_else(|| msg_head::new())
    }

    // .atbus.protocol.ping_data node_ping = 11;


    pub fn get_node_ping(&self) -> &ping_data {
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::node_ping(ref v)) => v,
            _ => <ping_data as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_node_ping(&mut self) {
        self.msg_body = ::std::option::Option::None;
    }

    pub fn has_node_ping(&self) -> bool {
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::node_ping(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_node_ping(&mut self, v: ping_data) {
        self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::node_ping(v))
    }

    // Mutable pointer to the field.
    pub fn mut_node_ping(&mut self) -> &mut ping_data {
        if let ::std::option::Option::Some(msg_oneof_msg_body::node_ping(_)) = self.msg_body {
        } else {
            self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::node_ping(ping_data::new()));
        }
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::node_ping(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_node_ping(&mut self) -> ping_data {
        if self.has_node_ping() {
            match self.msg_body.take() {
                ::std::option::Option::Some(msg_oneof_msg_body::node_ping(v)) => v,
                _ => panic!(),
            }
        } else {
            ping_data::new()
        }
    }

    // .atbus.protocol.ping_data node_pong = 12;


    pub fn get_node_pong(&self) -> &ping_data {
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::node_pong(ref v)) => v,
            _ => <ping_data as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_node_pong(&mut self) {
        self.msg_body = ::std::option::Option::None;
    }

    pub fn has_node_pong(&self) -> bool {
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::node_pong(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_node_pong(&mut self, v: ping_data) {
        self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::node_pong(v))
    }

    // Mutable pointer to the field.
    pub fn mut_node_pong(&mut self) -> &mut ping_data {
        if let ::std::option::Option::Some(msg_oneof_msg_body::node_pong(_)) = self.msg_body {
        } else {
            self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::node_pong(ping_data::new()));
        }
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::node_pong(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_node_pong(&mut self) -> ping_data {
        if self.has_node_pong() {
            match self.msg_body.take() {
                ::std::option::Option::Some(msg_oneof_msg_body::node_pong(v)) => v,
                _ => panic!(),
            }
        } else {
            ping_data::new()
        }
    }

    // .atbus.protocol.command_data command = 13;


    pub fn get_command(&self) -> &command_data {
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::command(ref v)) => v,
            _ => <command_data as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_command(&mut self) {
        self.msg_body = ::std::option::Option::None;
    }

    pub fn has_command(&self) -> bool {
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::command(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: command_data) {
        self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::command(v))
    }

    // Mutable pointer to the field.
    pub fn mut_command(&mut self) -> &mut command_data {
        if let ::std::option::Option::Some(msg_oneof_msg_body::command(_)) = self.msg_body {
        } else {
            self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::command(command_data::new()));
        }
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::command(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_command(&mut self) -> command_data {
        if self.has_command() {
            match self.msg_body.take() {
                ::std::option::Option::Some(msg_oneof_msg_body::command(v)) => v,
                _ => panic!(),
            }
        } else {
            command_data::new()
        }
    }

    // .atbus.protocol.packet_data forward = 14;


    pub fn get_forward(&self) -> &packet_data {
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::forward(ref v)) => v,
            _ => <packet_data as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_forward(&mut self) {
        self.msg_body = ::std::option::Option::None;
    }

    pub fn has_forward(&self) -> bool {
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::forward(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_forward(&mut self, v: packet_data) {
        self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::forward(v))
    }

    // Mutable pointer to the field.
    pub fn mut_forward(&mut self) -> &mut packet_data {
        if let ::std::option::Option::Some(msg_oneof_msg_body::forward(_)) = self.msg_body {
        } else {
            self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::forward(packet_data::new()));
        }
        match self.msg_body {
            ::std::option::Option::Some(msg_oneof_msg_body::forward(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_forward(&mut self) -> packet_data {
        if self.has_forward() {
            match self.msg_body.take() {
                ::std::option::Option::Some(msg_oneof_msg_body::forward(v)) => v,
                _ => panic!(),
            }
        } else {
            packet_data::new()
        }
    }
}

impl ::protobuf::Message for msg {
    fn is_initialized(&self) -> bool {
        for v in &self.head {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(msg_oneof_msg_body::node_ping(ref v)) = self.msg_body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(msg_oneof_msg_body::node_pong(ref v)) = self.msg_body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(msg_oneof_msg_body::command(ref v)) = self.msg_body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(msg_oneof_msg_body::forward(ref v)) = self.msg_body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.head)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::node_ping(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::node_pong(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::command(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg_body = ::std::option::Option::Some(msg_oneof_msg_body::forward(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.msg_body {
            match v {
                &msg_oneof_msg_body::node_ping(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &msg_oneof_msg_body::node_pong(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &msg_oneof_msg_body::command(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &msg_oneof_msg_body::forward(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.msg_body {
            match v {
                &msg_oneof_msg_body::node_ping(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &msg_oneof_msg_body::node_pong(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &msg_oneof_msg_body::command(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &msg_oneof_msg_body::forward(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> msg {
        msg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<msg_head>>(
                "head",
                |m: &msg| { &m.head },
                |m: &mut msg| { &mut m.head },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ping_data>(
                "node_ping",
                msg::has_node_ping,
                msg::get_node_ping,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ping_data>(
                "node_pong",
                msg::has_node_pong,
                msg::get_node_pong,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, command_data>(
                "command",
                msg::has_command,
                msg::get_command,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, packet_data>(
                "forward",
                msg::has_forward,
                msg::get_forward,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<msg>(
                "msg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static msg {
        static instance: ::protobuf::rt::LazyV2<msg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(msg::new)
    }
}

impl ::protobuf::Clear for msg {
    fn clear(&mut self) {
        self.head.clear();
        self.msg_body = ::std::option::Option::None;
        self.msg_body = ::std::option::Option::None;
        self.msg_body = ::std::option::Option::None;
        self.msg_body = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for msg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for msg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

// Note: you cannot use pattern matching for enums with allow_alias option
#[derive(Clone,Eq,Debug)]
pub enum ATBUS_PROTOCOL_CONST {
    ATBUS_PROTOCOL_CONST_UNKNOWN, // 0
    ATBUS_PROTOCOL_VERSION, // 3
    ATBUS_PROTOCOL_MINIMAL_VERSION, // 3
}

impl ::std::cmp::PartialEq for ATBUS_PROTOCOL_CONST {
    fn eq(&self, other: &Self) -> bool {
        ::protobuf::ProtobufEnum::value(self) == ::protobuf::ProtobufEnum::value(other)
    }
}

impl ::std::hash::Hash for ATBUS_PROTOCOL_CONST {
    fn hash<H : ::std::hash::Hasher>(&self, state: &mut H) {
        state.write_i32(::protobuf::ProtobufEnum::value(self))
    }
}

impl ::protobuf::ProtobufEnum for ATBUS_PROTOCOL_CONST {
    fn value(&self) -> i32 {
        match *self {
            ATBUS_PROTOCOL_CONST::ATBUS_PROTOCOL_CONST_UNKNOWN => 0,
            ATBUS_PROTOCOL_CONST::ATBUS_PROTOCOL_VERSION => 3,
            ATBUS_PROTOCOL_CONST::ATBUS_PROTOCOL_MINIMAL_VERSION => 3,
        }
    }

    fn from_i32(value: i32) -> ::std::option::Option<ATBUS_PROTOCOL_CONST> {
        match value {
            0 => ::std::option::Option::Some(ATBUS_PROTOCOL_CONST::ATBUS_PROTOCOL_CONST_UNKNOWN),
            3 => ::std::option::Option::Some(ATBUS_PROTOCOL_CONST::ATBUS_PROTOCOL_VERSION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ATBUS_PROTOCOL_CONST] = &[
            ATBUS_PROTOCOL_CONST::ATBUS_PROTOCOL_CONST_UNKNOWN,
            ATBUS_PROTOCOL_CONST::ATBUS_PROTOCOL_VERSION,
            ATBUS_PROTOCOL_CONST::ATBUS_PROTOCOL_MINIMAL_VERSION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ATBUS_PROTOCOL_CONST>("ATBUS_PROTOCOL_CONST", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ATBUS_PROTOCOL_CONST {
}

impl ::std::default::Default for ATBUS_PROTOCOL_CONST {
    fn default() -> Self {
        ATBUS_PROTOCOL_CONST::ATBUS_PROTOCOL_CONST_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ATBUS_PROTOCOL_CONST {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ATBUS_PACKET_FLAG_TYPE {
    ATBUS_PACKET_FLAG_NONE = 0,
    ATBUS_PACKET_FLAG_RESET_SEQUENCE = 1,
    ATBUS_PACKET_FLAG_ROUTER_UNREACHABLE = 2,
}

impl ::protobuf::ProtobufEnum for ATBUS_PACKET_FLAG_TYPE {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ATBUS_PACKET_FLAG_TYPE> {
        match value {
            0 => ::std::option::Option::Some(ATBUS_PACKET_FLAG_TYPE::ATBUS_PACKET_FLAG_NONE),
            1 => ::std::option::Option::Some(ATBUS_PACKET_FLAG_TYPE::ATBUS_PACKET_FLAG_RESET_SEQUENCE),
            2 => ::std::option::Option::Some(ATBUS_PACKET_FLAG_TYPE::ATBUS_PACKET_FLAG_ROUTER_UNREACHABLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ATBUS_PACKET_FLAG_TYPE] = &[
            ATBUS_PACKET_FLAG_TYPE::ATBUS_PACKET_FLAG_NONE,
            ATBUS_PACKET_FLAG_TYPE::ATBUS_PACKET_FLAG_RESET_SEQUENCE,
            ATBUS_PACKET_FLAG_TYPE::ATBUS_PACKET_FLAG_ROUTER_UNREACHABLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ATBUS_PACKET_FLAG_TYPE>("ATBUS_PACKET_FLAG_TYPE", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ATBUS_PACKET_FLAG_TYPE {
}

impl ::std::default::Default for ATBUS_PACKET_FLAG_TYPE {
    fn default() -> Self {
        ATBUS_PACKET_FLAG_TYPE::ATBUS_PACKET_FLAG_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for ATBUS_PACKET_FLAG_TYPE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17libatbus_protocol.proto\x12\x0eatbus.protocol\x1a\x16libatbus_opti\
    ons.proto\"\x93\x02\n\x0ccommand_data\x12\x1a\n\x08sequence\x18\x01\x20\
    \x01(\x03R\x08sequence\x12\x1c\n\targuments\x18\x02\x20\x03(\x0cR\targum\
    ents\x129\n\x07options\x18\x03\x20\x01(\x0b2\x1f.atbus.protocol.command_\
    optionsR\x07options\x12:\n\x04tags\x18\x04\x20\x03(\x0b2&.atbus.protocol\
    .command_data.TagsEntryR\x04tags\x1aR\n\tTagsEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12/\n\x05value\x18\x02\x20\x01(\x0b2\x19.atbus.\
    protocol.any_valueR\x05value:\x028\x01\"E\n\tping_data\x12\x1a\n\x08sequ\
    ence\x18\x01\x20\x01(\x03R\x08sequence\x12\x1c\n\ttimepoint\x18\x02\x20\
    \x01(\x03R\ttimepoint\"\xdf\x03\n\x0bpacket_data\x12'\n\x0fpacket_sequen\
    ce\x18\x01\x20\x01(\x03R\x0epacketSequence\x12-\n\x12packet_acknowledge\
    \x18\x02\x20\x01(\x03R\x11packetAcknowledge\x12\x18\n\x07content\x18\x03\
    \x20\x01(\x0cR\x07content\x12\x14\n\x05flags\x18\x04\x20\x01(\x05R\x05fl\
    ags\x128\n\x07options\x18\x05\x20\x01(\x0b2\x1e.atbus.protocol.packet_op\
    tionsR\x07options\x129\n\x04tags\x18\x06\x20\x03(\x0b2%.atbus.protocol.p\
    acket_data.TagsEntryR\x04tags\x12,\n\x12packet_slice_start\x18\x07\x20\
    \x01(\x03R\x10packetSliceStart\x12,\n\x12packet_slice_count\x18\x08\x20\
    \x01(\x03R\x10packetSliceCount\x12#\n\rpacket_length\x18\t\x20\x01(\x03R\
    \x0cpacketLength\x1aR\n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12/\n\x05value\x18\x02\x20\x01(\x0b2\x19.atbus.protocol.any_val\
    ueR\x05value:\x028\x01\"^\n\x08msg_head\x12\x18\n\x07version\x18\x01\x20\
    \x01(\x05R\x07version\x12\x16\n\x06source\x18\x02\x20\x01(\x0cR\x06sourc\
    e\x12\x20\n\x0bdestination\x18\x03\x20\x01(\x0cR\x0bdestination\"\xa6\
    \x02\n\x03msg\x12,\n\x04head\x18\x01\x20\x01(\x0b2\x18.atbus.protocol.ms\
    g_headR\x04head\x128\n\tnode_ping\x18\x0b\x20\x01(\x0b2\x19.atbus.protoc\
    ol.ping_dataH\0R\x08nodePing\x128\n\tnode_pong\x18\x0c\x20\x01(\x0b2\x19\
    .atbus.protocol.ping_dataH\0R\x08nodePong\x128\n\x07command\x18\r\x20\
    \x01(\x0b2\x1c.atbus.protocol.command_dataH\0R\x07command\x127\n\x07forw\
    ard\x18\x0e\x20\x01(\x0b2\x1b.atbus.protocol.packet_dataH\0R\x07forwardB\
    \n\n\x08msg_body*|\n\x14ATBUS_PROTOCOL_CONST\x12\x20\n\x1cATBUS_PROTOCOL\
    _CONST_UNKNOWN\x10\0\x12\x1a\n\x16ATBUS_PROTOCOL_VERSION\x10\x03\x12\"\n\
    \x1eATBUS_PROTOCOL_MINIMAL_VERSION\x10\x03\x1a\x02\x10\x01*\x84\x01\n\
    \x16ATBUS_PACKET_FLAG_TYPE\x12\x1a\n\x16ATBUS_PACKET_FLAG_NONE\x10\0\x12\
    $\n\x20ATBUS_PACKET_FLAG_RESET_SEQUENCE\x10\x01\x12(\n$ATBUS_PACKET_FLAG\
    _ROUTER_UNREACHABLE\x10\x02B\x05H\x01\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
