// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `libatbus_options.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct any_value {
    // message oneof groups
    pub value: ::std::option::Option<any_value_oneof_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a any_value {
    fn default() -> &'a any_value {
        <any_value as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum any_value_oneof_value {
    string_value(::std::string::String),
    bool_value(bool),
    int_value(i64),
    double_value(f64),
    array_value(array_value),
    kvlist_value(key_value_list),
}

impl any_value {
    pub fn new() -> any_value {
        ::std::default::Default::default()
    }

    // optional string string_value = 1;


    pub fn get_string_value(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::string_value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_string_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::string_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(any_value_oneof_value::string_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(any_value_oneof_value::string_value(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(any_value_oneof_value::string_value(::std::string::String::new()));
        }
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::string_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.value.take() {
                ::std::option::Option::Some(any_value_oneof_value::string_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // optional bool bool_value = 2;


    pub fn get_bool_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::bool_value(v)) => v,
            _ => false,
        }
    }
    pub fn clear_bool_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_bool_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::bool_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_value(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(any_value_oneof_value::bool_value(v))
    }

    // optional int64 int_value = 3;


    pub fn get_int_value(&self) -> i64 {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::int_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_int_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_int_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::int_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int_value(&mut self, v: i64) {
        self.value = ::std::option::Option::Some(any_value_oneof_value::int_value(v))
    }

    // optional double double_value = 4;


    pub fn get_double_value(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::double_value(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_double_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::double_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(any_value_oneof_value::double_value(v))
    }

    // optional .atbus.protocol.array_value array_value = 5;


    pub fn get_array_value(&self) -> &array_value {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::array_value(ref v)) => v,
            _ => <array_value as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_array_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_array_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::array_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_array_value(&mut self, v: array_value) {
        self.value = ::std::option::Option::Some(any_value_oneof_value::array_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_array_value(&mut self) -> &mut array_value {
        if let ::std::option::Option::Some(any_value_oneof_value::array_value(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(any_value_oneof_value::array_value(array_value::new()));
        }
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::array_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_array_value(&mut self) -> array_value {
        if self.has_array_value() {
            match self.value.take() {
                ::std::option::Option::Some(any_value_oneof_value::array_value(v)) => v,
                _ => panic!(),
            }
        } else {
            array_value::new()
        }
    }

    // optional .atbus.protocol.key_value_list kvlist_value = 6;


    pub fn get_kvlist_value(&self) -> &key_value_list {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::kvlist_value(ref v)) => v,
            _ => <key_value_list as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_kvlist_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_kvlist_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::kvlist_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kvlist_value(&mut self, v: key_value_list) {
        self.value = ::std::option::Option::Some(any_value_oneof_value::kvlist_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kvlist_value(&mut self) -> &mut key_value_list {
        if let ::std::option::Option::Some(any_value_oneof_value::kvlist_value(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(any_value_oneof_value::kvlist_value(key_value_list::new()));
        }
        match self.value {
            ::std::option::Option::Some(any_value_oneof_value::kvlist_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kvlist_value(&mut self) -> key_value_list {
        if self.has_kvlist_value() {
            match self.value.take() {
                ::std::option::Option::Some(any_value_oneof_value::kvlist_value(v)) => v,
                _ => panic!(),
            }
        } else {
            key_value_list::new()
        }
    }
}

impl ::protobuf::Message for any_value {
    fn is_initialized(&self) -> bool {
        if let Some(any_value_oneof_value::array_value(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(any_value_oneof_value::kvlist_value(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(any_value_oneof_value::string_value(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(any_value_oneof_value::bool_value(is.read_bool()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(any_value_oneof_value::int_value(is.read_int64()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(any_value_oneof_value::double_value(is.read_double()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(any_value_oneof_value::array_value(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(any_value_oneof_value::kvlist_value(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &any_value_oneof_value::string_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &any_value_oneof_value::bool_value(v) => {
                    my_size += 2;
                },
                &any_value_oneof_value::int_value(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &any_value_oneof_value::double_value(v) => {
                    my_size += 9;
                },
                &any_value_oneof_value::array_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &any_value_oneof_value::kvlist_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &any_value_oneof_value::string_value(ref v) => {
                    os.write_string(1, v)?;
                },
                &any_value_oneof_value::bool_value(v) => {
                    os.write_bool(2, v)?;
                },
                &any_value_oneof_value::int_value(v) => {
                    os.write_int64(3, v)?;
                },
                &any_value_oneof_value::double_value(v) => {
                    os.write_double(4, v)?;
                },
                &any_value_oneof_value::array_value(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &any_value_oneof_value::kvlist_value(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> any_value {
        any_value::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "string_value",
                any_value::has_string_value,
                any_value::get_string_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "bool_value",
                any_value::has_bool_value,
                any_value::get_bool_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "int_value",
                any_value::has_int_value,
                any_value::get_int_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "double_value",
                any_value::has_double_value,
                any_value::get_double_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, array_value>(
                "array_value",
                any_value::has_array_value,
                any_value::get_array_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, key_value_list>(
                "kvlist_value",
                any_value::has_kvlist_value,
                any_value::get_kvlist_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<any_value>(
                "any_value",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static any_value {
        static instance: ::protobuf::rt::LazyV2<any_value> = ::protobuf::rt::LazyV2::INIT;
        instance.get(any_value::new)
    }
}

impl ::protobuf::Clear for any_value {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for any_value {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for any_value {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct array_value {
    // message fields
    pub values: ::protobuf::RepeatedField<any_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a array_value {
    fn default() -> &'a array_value {
        <array_value as ::protobuf::Message>::default_instance()
    }
}

impl array_value {
    pub fn new() -> array_value {
        ::std::default::Default::default()
    }

    // repeated .atbus.protocol.any_value values = 1;


    pub fn get_values(&self) -> &[any_value] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<any_value>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<any_value> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<any_value> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for array_value {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.values {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> array_value {
        array_value::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<any_value>>(
                "values",
                |m: &array_value| { &m.values },
                |m: &mut array_value| { &mut m.values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<array_value>(
                "array_value",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static array_value {
        static instance: ::protobuf::rt::LazyV2<array_value> = ::protobuf::rt::LazyV2::INIT;
        instance.get(array_value::new)
    }
}

impl ::protobuf::Clear for array_value {
    fn clear(&mut self) {
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for array_value {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for array_value {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct key_value_list {
    // message fields
    pub values: ::std::collections::HashMap<::std::string::String, any_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a key_value_list {
    fn default() -> &'a key_value_list {
        <key_value_list as ::protobuf::Message>::default_instance()
    }
}

impl key_value_list {
    pub fn new() -> key_value_list {
        ::std::default::Default::default()
    }

    // repeated .atbus.protocol.key_value_list.ValuesEntry values = 1;


    pub fn get_values(&self) -> &::std::collections::HashMap<::std::string::String, any_value> {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::std::collections::HashMap<::std::string::String, any_value>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, any_value> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::std::collections::HashMap<::std::string::String, any_value> {
        ::std::mem::replace(&mut self.values, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for key_value_list {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<any_value>>(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<any_value>>(1, &self.values);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<any_value>>(1, &self.values, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> key_value_list {
        key_value_list::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<any_value>>(
                "values",
                |m: &key_value_list| { &m.values },
                |m: &mut key_value_list| { &mut m.values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<key_value_list>(
                "key_value_list",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static key_value_list {
        static instance: ::protobuf::rt::LazyV2<key_value_list> = ::protobuf::rt::LazyV2::INIT;
        instance.get(key_value_list::new)
    }
}

impl ::protobuf::Clear for key_value_list {
    fn clear(&mut self) {
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for key_value_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for key_value_list {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct command_options {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a command_options {
    fn default() -> &'a command_options {
        <command_options as ::protobuf::Message>::default_instance()
    }
}

impl command_options {
    pub fn new() -> command_options {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for command_options {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> command_options {
        command_options::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<command_options>(
                "command_options",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static command_options {
        static instance: ::protobuf::rt::LazyV2<command_options> = ::protobuf::rt::LazyV2::INIT;
        instance.get(command_options::new)
    }
}

impl ::protobuf::Clear for command_options {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for command_options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for command_options {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct packet_options {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a packet_options {
    fn default() -> &'a packet_options {
        <packet_options as ::protobuf::Message>::default_instance()
    }
}

impl packet_options {
    pub fn new() -> packet_options {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for packet_options {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> packet_options {
        packet_options::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<packet_options>(
                "packet_options",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static packet_options {
        static instance: ::protobuf::rt::LazyV2<packet_options> = ::protobuf::rt::LazyV2::INIT;
        instance.get(packet_options::new)
    }
}

impl ::protobuf::Clear for packet_options {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for packet_options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for packet_options {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16libatbus_options.proto\x12\x0eatbus.protocol\"\xa3\x02\n\tany_valu\
    e\x12#\n\x0cstring_value\x18\x01\x20\x01(\tH\0R\x0bstringValue\x12\x1f\n\
    \nbool_value\x18\x02\x20\x01(\x08H\0R\tboolValue\x12\x1d\n\tint_value\
    \x18\x03\x20\x01(\x03H\0R\x08intValue\x12#\n\x0cdouble_value\x18\x04\x20\
    \x01(\x01H\0R\x0bdoubleValue\x12>\n\x0barray_value\x18\x05\x20\x01(\x0b2\
    \x1b.atbus.protocol.array_valueH\0R\narrayValue\x12C\n\x0ckvlist_value\
    \x18\x06\x20\x01(\x0b2\x1e.atbus.protocol.key_value_listH\0R\x0bkvlistVa\
    lueB\x07\n\x05value\"@\n\x0barray_value\x121\n\x06values\x18\x01\x20\x03\
    (\x0b2\x19.atbus.protocol.any_valueR\x06values\"\xaa\x01\n\x0ekey_value_\
    list\x12B\n\x06values\x18\x01\x20\x03(\x0b2*.atbus.protocol.key_value_li\
    st.ValuesEntryR\x06values\x1aT\n\x0bValuesEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12/\n\x05value\x18\x02\x20\x01(\x0b2\x19.atbus.prot\
    ocol.any_valueR\x05value:\x028\x01\"\x1c\n\x0fcommand_options*\t\x08\xd0\
    \x0f\x10\x80\x80\x80\x80\x02\"\x1b\n\x0epacket_options*\t\x08\xd0\x0f\
    \x10\x80\x80\x80\x80\x02B\x05H\x01\xf8\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
